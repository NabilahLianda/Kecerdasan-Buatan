# -*- coding: utf-8 -*-
"""Aplikasi KCB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I3MMvoHZiHesRJCFI0GTcgEXaNiiydMO
"""

#Instalasi Streamlit & Pyngrok

!pip install streamlit pyngrok -q

#Function Simpan File app.py

from IPython.core.magic import register_cell_magic

@register_cell_magic
def writefile(line, cell):
    with open(line, 'w') as f:
        f.write(cell)

# Commented out IPython magic to ensure Python compatibility.
# #File Streamlit app.py
# 
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# 
# st.set_page_config(layout="wide")
# st.title("🧠 Aplikasi K-Means Clustering")
# 
# # --- DATASET AWAL ---
# initial_data = pd.DataFrame([
#     {'Nama': 'Sucianto', 'Tidak Absen Masuk': 6, 'Sakit': 2, 'Izin': 15, 'Alpa': 0, 'Tidak Absen Pulang': 10},
#     {'Nama': 'Riadi', 'Tidak Absen Masuk': 10, 'Sakit': 10, 'Izin': 6, 'Alpa': 1, 'Tidak Absen Pulang': 9},
#     {'Nama': 'Juliana', 'Tidak Absen Masuk': 4, 'Sakit': 8, 'Izin': 11, 'Alpa': 0, 'Tidak Absen Pulang': 0},
#     {'Nama': 'Vivin Rhmaiani', 'Tidak Absen Masuk': 7, 'Sakit': 6, 'Izin': 8, 'Alpa': 1, 'Tidak Absen Pulang': 2},
#     {'Nama': 'Suyono', 'Tidak Absen Masuk': 9, 'Sakit': 10, 'Izin': 7, 'Alpa': 5, 'Tidak Absen Pulang': 16},
#     {'Nama': 'Dinauli Manik', 'Tidak Absen Masuk': 11, 'Sakit': 4, 'Izin': 6, 'Alpa': 1, 'Tidak Absen Pulang': 15},
#     {'Nama': 'Veny Setia Ningrum', 'Tidak Absen Masuk': 26, 'Sakit': 6, 'Izin': 4, 'Alpa': 2, 'Tidak Absen Pulang': 27},
#     {'Nama': 'Junedi Silalahi', 'Tidak Absen Masuk': 16, 'Sakit': 3, 'Izin': 11, 'Alpa': 7, 'Tidak Absen Pulang': 26},
#     {'Nama': 'Poltak Silaen', 'Tidak Absen Masuk': 11, 'Sakit': 4, 'Izin': 2, 'Alpa': 11, 'Tidak Absen Pulang': 40},
#     {'Nama': 'Median Sahara Manurung', 'Tidak Absen Masuk': 12, 'Sakit': 7, 'Izin': 10, 'Alpa': 18, 'Tidak Absen Pulang': 38},
#     {'Nama': 'Edi Sopian Pohan', 'Tidak Absen Masuk': 13, 'Sakit': 4, 'Izin': 6, 'Alpa': 12, 'Tidak Absen Pulang': 34},
#     {'Nama': 'Herman', 'Tidak Absen Masuk': 21, 'Sakit': 11, 'Izin': 8, 'Alpa': 11, 'Tidak Absen Pulang': 55},
#     {'Nama': 'Suman', 'Tidak Absen Masuk': 17, 'Sakit': 3, 'Izin': 10, 'Alpa': 9, 'Tidak Absen Pulang': 31}
# ])
# 
# # --- INISIALISASI SESSION STATE ---
# if 'data' not in st.session_state:
#     st.session_state['data'] = initial_data.copy()
# if 'result_df' not in st.session_state:
#     st.session_state['result_df'] = pd.DataFrame()
# 
# # --- FORM INPUT DATA ---
# st.subheader("1. Masukkan Data Pegawai")
# with st.form("input_form"):
#     nama = st.text_input("Nama Pegawai")
#     tam = st.number_input("Tidak Absen Masuk", min_value=0)
#     sakit = st.number_input("Sakit", min_value=0)
#     izin = st.number_input("Izin", min_value=0)
#     alpa = st.number_input("Alpa", min_value=0)
#     tap = st.number_input("Tidak Absen Pulang", min_value=0)
#     submitted = st.form_submit_button("Tambahkan")
# 
# if submitted:
#     new_row = {
#         'Nama': nama,
#         'Tidak Absen Masuk': tam,
#         'Sakit': sakit,
#         'Izin': izin,
#         'Alpa': alpa,
#         'Tidak Absen Pulang': tap
#     }
#     st.session_state['data'] = pd.concat(
#         [st.session_state['data'], pd.DataFrame([new_row])],
#         ignore_index=True
#     )
#     st.success("✅ Data berhasil ditambahkan!")
# 
# df = st.session_state['data']
# 
# # --- TAMPILKAN DATA ---
# st.subheader("2. Data Pegawai Saat Ini")
# df_display = df.copy()
# df_display.index = np.arange(1, len(df_display) + 1)
# st.dataframe(df_display, use_container_width=True)
# 
# # --- PILIH CENTROID ---
# if len(df) >= 3:
#     st.subheader("3. Pilih 3 Data Sebagai Centroid Awal")
#     options = df['Nama'].tolist()
#     col1, col2, col3 = st.columns(3)
#     with col1:
#         c1 = st.selectbox("Centroid 1", options, key="c1")
#     with col2:
#         c2 = st.selectbox("Centroid 2", options, key="c2")
#     with col3:
#         c3 = st.selectbox("Centroid 3", options, key="c3")
# 
#     if st.button("🔁 Jalankan K-Means Sampai Konvergen"):
#         centroids = {
#             'C1': df[df['Nama'] == c1].iloc[0, 1:].to_numpy(dtype=float),
#             'C2': df[df['Nama'] == c2].iloc[0, 1:].to_numpy(dtype=float),
#             'C3': df[df['Nama'] == c3].iloc[0, 1:].to_numpy(dtype=float)
#         }
# 
#         previous_clusters = None
#         iteration = 1
# 
#         while True:
#             results = []
#             for _, row in df.iterrows():
#                 x = row[1:].to_numpy(dtype=float)
#                 distances = {key: np.linalg.norm(x - centroids[key]) for key in centroids}
#                 closest = min(distances, key=distances.get)
#                 results.append({
#                     'Nama': row['Nama'],
#                     'C1': round(distances['C1'], 4),
#                     'C2': round(distances['C2'], 4),
#                     'C3': round(distances['C3'], 4),
#                     'Cluster': closest
#                 })
# 
#             result_df = pd.DataFrame(results)
# 
#             if previous_clusters is not None and all(result_df['Cluster'] == previous_clusters):
#                 st.success(f"✅ Konvergen pada iterasi ke-{iteration - 1}!")
#                 break
# 
#             previous_clusters = result_df['Cluster'].copy()
# 
#             merged = df.merge(result_df[['Nama', 'Cluster']], on='Nama', how='left')
#             for cluster_name in ['C1', 'C2', 'C3']:
#                 members = merged[merged['Cluster'] == cluster_name].drop(columns=['Nama', 'Cluster'])
#                 if not members.empty:
#                     centroids[cluster_name] = members.mean().to_numpy()
# 
#             iteration += 1
# 
#         st.session_state['result_df'] = result_df
#         st.subheader("4. Hasil Clustering Akhir")
#         st.dataframe(result_df, use_container_width=True)
# 
# else:
#     st.warning("⚠️ Masukkan minimal 3 data untuk bisa memilih centroid!")
#

#Set Token Ngrok

from pyngrok import conf
conf.get_default().auth_token = "2yWwjHGZG2HUta7SDLzgJlWPwhm_wZRC9CueQrnPSzFGzCF4"

#Run Streamlit & URL Ngrok

!streamlit run app.py &>/content/log.txt &

from pyngrok import ngrok
public_url = ngrok.connect(8501)
print("🌐 Akses aplikasi di:", public_url)